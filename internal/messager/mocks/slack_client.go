// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slack "github.com/slack-go/slack"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

// SendMessageContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SlackClient) SendMessageContext(_a0 context.Context, _a1 string, _a2 ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...slack.MsgOption) (string, string, string, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r2 = rf(_a0, _a1, _a2...)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, ...slack.MsgOption) error); ok {
		r3 = rf(_a0, _a1, _a2...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewSlackClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClient(t mockConstructorTestingTNewSlackClient) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
